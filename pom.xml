<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    
    
    
     <!-- para ejecutar maven en STS4 necesitamos dar click derecho en el pom 
                        y luego run as y elegimos maven xxx donde xxx es la etapa de maven

                        cuando ejecuto maven build hace todo.
                        cuando ejecuto maven test  hace compilacion y pruebas
                        
                        Si doy por ejemplo run as build... en goals escribo compile, solo compila (ejecuta ese goal)

                        con maven build y luego package construye un jar o war con las dependencias

                        
                        asi es como puedo ejecutar los goals de maven, otro goal es package
    
    Diagrams.net es la aplicación de diagramación más estrechamente integrada de Google Drive disponible.
-Diagramas de flujo.
-UML (Lenguaje Unificado de Modelado).
-MER (Modelo Entidad-Relación).
-Diagramas de Red.
-Modelos de Procesos de Negocios.
-Organigramas.
-Circuitos electrónicos y más.
-Wireframing y maquetas.
https://www.diagrams.net/
    
    
Jamboard es una pantalla inteligente que te permite extraer con rapidez imágenes de 
una búsqueda en Google, guardar el trabajo en la nube automáticamente, usar la herramienta 
de reconocimiento de formas y escritura a mano fácil de leer, y dibujar con una pluma stylus,
 pero borrar con el dedo igual que en una pizarra.
    
    
    
    -->
                        
                        
                        
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>mx.uam.ayd</groupId>
    <artifactId>proyecto</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>proyecto</name>
    <description>Arquitectura de base para el proyecto</description>

    <properties>
        <java.version>8</java.version>
        <docker.image>otrebmuh/${project.artifactId}</docker.image>
    </properties>

    <dependencies>
	
        <!--  JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Base de datos H2 -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!--para uso con java > 8-->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.0</version>
        </dependency>
		
        <!--  Thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Servidor Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!--  Swagger -->
		
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>
         <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
        
        <!--spring security-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            <optional>true</optional>
        </dependency>
		
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
    
    <!--<packaging>war</packaging> con esto genera el war-->
    
    <build>
        
        <plugins>
            <!--este plugin permite hacer el uber jar-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--plugin para crear mi imagen docker, busca el Dockerfile y usa informacion del pom
            para nombrar mi imagen, se ejecutan todas las acciones de maven y luego crea la imagen
            automaticamente
            maven build  package y listo hace todo y crea la imagen, hay que descomentar el plugin 
            para que lo haga, si veo mis imagenes con docker images ya esta la imagen creada,
            esto automatiza el proceso de creacion de la imagen.
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.13</version>
                <executions>
                    <execution>
                    <id>default</id>
                    <goals>
                        <goal>build</goal>
                        <goal>push</goal>
   
                        
                    </goals>
                    </execution>
                </executions>
                <configuration>
                <repository>${docker.image}</repository>
                <tag>${project.version}</tag>
                </configuration>
            </plugin>-->
        </plugins>
    </build>

</project>


<!--
Docker:

necesitamos instalar docker
y luego configurarle cuanta memoria y disco le vamos a dar


comandos:
docker ps   me dice que contenedores estan corriendo en mi computadora
docker images   nos muestra las imagenes descargadas
docker stop "container id"   detiene la ejecucion de un contenedor

si no corro un comando (/bin/sh) en docker run, el contenedor se crea y se destruye

docker run -p 8080:8080 miaplicacion   el puerto 8080 del contenedor exportamelo en el 8080 local

docker rmi "container image"    borra la imagen


para poder usar docker push es necesario crear una cuenta en dockerhub
-->